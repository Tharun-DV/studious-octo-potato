# GitLab CI/CD Pipeline with Docker Support
image: docker:latest

services:
  - docker:dind

variables:
  DOCKER_IMAGE_NAME: "$CI_REGISTRY_IMAGE"
  DOCKER_IMAGE_TAG: "$CI_COMMIT_REF_SLUG"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - build
  - test
  - security
  - package
  - deploy

# Build the application
build_app:
  image: node:18-alpine
  stage: build
  script:
    - npm ci
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/

# Test the application
test_app:
  image: node:18-alpine
  stage: test
  script:
    - npm ci
    - npm run test || echo "No tests found"
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull

# Security scan
security_scan:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy fs --exit-code 0 --format template --template "@contrib/sarif.tpl" -o gl-sast-report.json .
  artifacts:
    reports:
      sast: gl-sast-report.json
  allow_failure: true

# Build Docker image
build_docker:
  stage: package
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG .
    - docker build -t $DOCKER_IMAGE_NAME:latest .
    - docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - docker push $DOCKER_IMAGE_NAME:latest
  needs: ["build_app"]
  only:
    - main
    - develop

# Deploy to staging
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging..."
    - echo "Image: $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"
    # Example webhook call to trigger deployment
    # - curl -X POST -H "Authorization: Bearer $STAGING_WEBHOOK_TOKEN" $STAGING_WEBHOOK_URL
  environment:
    name: staging
    url: https://staging.yourdomain.com
  only:
    - develop
  needs: ["build_docker"]

# Deploy to production
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production..."
    - echo "Image: $DOCKER_IMAGE_NAME:latest"
    # Example webhook call to trigger deployment
    # - curl -X POST -H "Authorization: Bearer $PRODUCTION_WEBHOOK_TOKEN" $PRODUCTION_WEBHOOK_URL
  environment:
    name: production
    url: https://yourdomain.com
  only:
    - main
  needs: ["build_docker"]
  when: manual
