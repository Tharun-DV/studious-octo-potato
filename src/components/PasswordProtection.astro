---
interface Props {
  postTitle: string;
}

const { postTitle } = Astro.props;
---

<div class="password-protection">
  <div class="password-form">
    <h2>Protected Post</h2>
    <p>This post is password protected. Please enter the password to continue.</p>
    
    <div class="post-info">
      <h3>{postTitle}</h3>
    </div>
    
    <form class="password-form-element">
      <div class="input-group">
        <label for="password">Password:</label>
        <input
          type="password"
          id="password"
          name="password"
          placeholder="Enter password..."
          required
        />
      </div>
      <button type="submit" class="submit-button">
        Access Post
      </button>
    </form>
    
    <div class="error-message hidden" id="errorMessage">
      Incorrect password. Please try again.
    </div>
  </div>
</div>

<style>
  .password-protection {
    min-height: 60vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }

  .password-form {
    background-color: #1a1a1a;
    border: 1px solid #333;
    border-radius: 0.5rem;
    padding: 2rem;
    max-width: 400px;
    width: 100%;
    text-align: center;
  }

  .password-form h2 {
    margin-bottom: 1rem;
    color: #ffffff;
  }

  .password-form p {
    color: #ccc;
    margin-bottom: 1.5rem;
  }

  .post-info {
    background-color: #333;
    padding: 1rem;
    border-radius: 0.25rem;
    margin-bottom: 1.5rem;
  }

  .post-info h3 {
    margin: 0;
    color: #ffffff;
    font-size: 1.1rem;
  }

  .password-form-element {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .input-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    text-align: left;
  }

  .input-group label {
    font-weight: 500;
    color: #ffffff;
  }

  .input-group input {
    padding: 0.75rem;
    background-color: #000000;
    border: 2px solid #333;
    border-radius: 0.25rem;
    color: #ffffff;
    font-family: 'Fira Code', monospace;
    transition: border-color 0.3s ease;
  }

  .input-group input:focus {
    outline: none;
    border-color: #ffffff;
  }

  .input-group input::placeholder {
    color: #666;
  }

  .submit-button {
    padding: 0.75rem 1.5rem;
    background-color: #ffffff;
    color: #000000;
    border: none;
    border-radius: 0.25rem;
    font-family: 'Fira Code', monospace;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .submit-button:hover {
    background-color: #cccccc;
  }

  .error-message {
    color: #ff4444;
    background-color: #330000;
    padding: 0.75rem;
    border-radius: 0.25rem;
    margin-top: 1rem;
    border: 1px solid #aa0000;
  }

  .error-message.hidden {
    display: none;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('.password-form-element');
    const errorMessage = document.getElementById('errorMessage');

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(form as HTMLFormElement);
      const enteredPassword = formData.get('password') as string;
      
      if (!enteredPassword) {
        return;
      }

      // Get the correct password from the page's global variables
      const correctPassword = (window as any).correctPassword;
      const slug = (window as any).slug;
      
      if (enteredPassword === correctPassword) {
        // Password is correct, store authorization and show content
        localStorage.setItem(`post_${slug}_authorized`, 'true');
        document.getElementById('password-protection').style.display = 'none';
        document.getElementById('blog-content').style.display = 'block';
      } else {
        // Show error message
        errorMessage?.classList.remove('hidden');
        setTimeout(() => {
          errorMessage?.classList.add('hidden');
        }, 3000);
      }
    });
  });
</script>