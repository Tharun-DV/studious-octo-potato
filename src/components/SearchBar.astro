---
---

<div class="search-container">
  <div class="search-wrapper">
    <div class="search-icon">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="11" cy="11" r="8"></circle>
        <path d="m21 21-4.35-4.35"></path>
      </svg>
    </div>
    <input
      type="text"
      id="searchInput"
      placeholder="Search posts, tags, or content..."
      class="search-input"
      role="combobox"
      aria-expanded="false"
      aria-haspopup="listbox"
      aria-autocomplete="list"
      aria-describedby="searchInstructions"
      autocomplete="off"
      spellcheck="false"
    />
    <button class="search-clear" id="searchClear" aria-label="Clear search" style="display: none;">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    <div class="search-shortcut">
      <kbd>‚åòB</kbd>
    </div>
    <div id="searchInstructions" class="sr-only">
      Use arrow keys to navigate results, Enter to select, Escape to close
    </div>
  </div>
  
  <div id="searchResults" class="search-results hidden" role="listbox" aria-label="Search results">
    <div class="search-results-header">
      <span class="results-count" id="resultsCount"></span>
      <div class="search-tips">
        <span class="tip">Try: <code>#javascript</code> or <code>algorithm</code> ‚Ä¢ Press <code>‚åòB</code> to focus</span>
      </div>
    </div>
    <div class="search-results-content" id="searchResultsContent"></div>
  </div>
  
  <div id="searchLoading" class="search-loading hidden">
    <div class="loading-content">
      <div class="loading-spinner"></div>
      <span>Searching posts...</span>
    </div>
  </div>
  
  <div id="searchEmpty" class="search-empty hidden">
    <div class="empty-state">
      <div class="empty-icon">üîç</div>
      <h3>No posts found</h3>
      <p>Try adjusting your search terms or browse all posts</p>
      <div class="empty-suggestions">
        <span>Popular tags:</span>
        <div class="tag-suggestions" id="tagSuggestions"></div>
      </div>
    </div>
  </div>
</div>

<style>
  .search-container {
    position: relative;
    margin-bottom: 2rem;
    max-width: 100%;
  }

  .search-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    background: var(--bg-secondary);
    border: 2px solid var(--border-color);
    border-radius: 1rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .search-wrapper:focus-within {
    border-color: var(--accent-color);
    box-shadow: 0 0 0 3px var(--accent-hover), 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    transform: translateY(-1px);
  }

  .search-icon {
    position: absolute;
    left: 1rem;
    color: var(--text-muted);
    transition: color 0.3s ease;
    z-index: 2;
    pointer-events: none;
  }

  .search-wrapper:focus-within .search-icon {
    color: var(--accent-color);
  }

  .search-input {
    width: 100%;
    padding: 1rem 1rem 1rem 3rem;
    padding-right: 8rem;
    background: transparent;
    border: none;
    color: var(--text-primary);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.5;
    transition: all 0.3s ease;
  }

  .search-input:focus {
    outline: none;
  }

  .search-input::placeholder {
    color: var(--text-muted);
    font-weight: 400;
  }

  .search-clear {
    position: absolute;
    right: 5.5rem;
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    color: var(--text-muted);
    cursor: pointer;
    padding: 0.5rem;
    transition: all 0.2s ease;
    opacity: 0.7;
  }

  .search-clear:hover {
    background: var(--accent-hover);
    color: var(--accent-color);
    opacity: 1;
    transform: scale(1.05);
  }

  .search-shortcut {
    position: absolute;
    right: 1rem;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--text-muted);
    font-size: 0.875rem;
    pointer-events: none;
  }

  .search-shortcut kbd {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    padding: 0.25rem 0.5rem;
    font-family: inherit;
    font-size: 0.75rem;
    font-weight: 500;
    color: var(--text-secondary);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .search-results {
    position: absolute;
    top: calc(100% + 0.5rem);
    left: 0;
    right: 0;
    background: var(--bg-secondary);
    border: 2px solid var(--border-color);
    border-radius: 1rem;
    max-height: 500px;
    overflow: hidden;
    z-index: 50;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    backdrop-filter: blur(20px) saturate(1.2);
    animation: dropdownSlideIn 0.4s cubic-bezier(0.16, 1, 0.3, 1) forwards;
    transform-origin: top;
  }

  [data-theme="light"] .search-results {
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  .search-results.hidden {
    display: none;
  }

  .search-results-header {
    padding: 1rem 1.5rem 0.5rem;
    border-bottom: 1px solid var(--border-color);
    background: var(--bg-tertiary);
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .results-count {
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-weight: 500;
  }

  .search-tips {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .tip {
    font-size: 0.75rem;
    color: var(--text-muted);
  }

  .tip code {
    background: var(--accent-hover);
    color: var(--accent-color);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-family: 'Fira Code', monospace;
    font-size: 0.7rem;
    font-weight: 500;
  }

  .search-results-content {
    max-height: 400px;
    overflow-y: auto;
    padding: 0.5rem;
  }

  .search-results-content::-webkit-scrollbar {
    width: 6px;
  }

  .search-results-content::-webkit-scrollbar-track {
    background: var(--bg-tertiary);
    border-radius: 3px;
  }

  .search-results-content::-webkit-scrollbar-thumb {
    background: var(--border-color);
    border-radius: 3px;
    transition: background 0.2s ease;
  }

  .search-results-content::-webkit-scrollbar-thumb:hover {
    background: var(--text-muted);
  }

  .search-result {
    background: var(--bg-primary);
    border: none;
    border-bottom: 1px solid var(--border-color);
    border-radius: 0;
    padding: 0.75rem 1rem;
    margin: 0;
    cursor: pointer;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    display: block;
    text-decoration: none;
    color: inherit;
    outline: none;
    overflow: hidden;
  }

  .search-result:last-child {
    border-bottom: none;
  }

  .search-result:first-child {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }

  .search-result:hover, .search-result:focus {
    background: var(--bg-secondary);
    border-left: 3px solid var(--accent-color);
    padding-left: calc(1rem - 3px);
    transform: translateX(2px);
  }

  .search-result.focused {
    background: var(--bg-secondary);
    border-left: 3px solid var(--accent-color);
    padding-left: calc(1rem - 3px);
    transform: translateX(2px);
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  .search-result-title {
    font-family: 'Fira Code', 'JetBrains Mono', 'Consolas', 'Monaco', 'Courier New', monospace;
    font-weight: 400;
    font-size: 0.875rem;
    color: var(--text-primary);
    margin: 0;
    line-height: 1.4;
    transition: all 0.2s ease;
    letter-spacing: 0.01em;
  }

  .search-result:hover .search-result-title,
  .search-result.focused .search-result-title {
    color: var(--accent-color);
    font-weight: 500;
  }

  .search-highlight {
    background: var(--accent-hover);
    color: var(--accent-color);
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-weight: 600;
  }

  .search-loading {
    position: absolute;
    top: calc(100% + 0.5rem);
    left: 0;
    right: 0;
    background: var(--bg-secondary);
    border: 2px solid var(--border-color);
    border-radius: 1rem;
    padding: 2rem;
    text-align: center;
    z-index: 50;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    animation: dropdownSlideIn 0.3s cubic-bezier(0.16, 1, 0.3, 1) forwards;
  }

  .search-loading.hidden {
    display: none;
  }

  .loading-content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    color: var(--text-secondary);
    font-size: 0.95rem;
  }

  .loading-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid var(--border-color);
    border-top: 2px solid var(--accent-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  .search-empty {
    position: absolute;
    top: calc(100% + 0.5rem);
    left: 0;
    right: 0;
    background: var(--bg-secondary);
    border: 2px solid var(--border-color);
    border-radius: 1rem;
    padding: 2rem;
    text-align: center;
    z-index: 50;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    animation: dropdownSlideIn 0.3s cubic-bezier(0.16, 1, 0.3, 1) forwards;
  }

  .search-empty.hidden {
    display: none;
  }

  .empty-state {
    max-width: 300px;
    margin: 0 auto;
  }

  .empty-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
  }

  .empty-state h3 {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 0.5rem 0;
  }

  .empty-state p {
    color: var(--text-secondary);
    margin: 0 0 1.5rem 0;
    font-size: 0.95rem;
    line-height: 1.5;
  }

  .empty-suggestions {
    text-align: left;
  }

  .empty-suggestions > span {
    font-size: 0.875rem;
    color: var(--text-muted);
    font-weight: 500;
    display: block;
    margin-bottom: 0.75rem;
  }

  .tag-suggestions {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: center;
  }

  .tag-suggestion {
    background: var(--bg-tertiary);
    color: var(--text-secondary);
    padding: 0.375rem 0.75rem;
    border-radius: 0.5rem;
    font-size: 0.8rem;
    font-weight: 500;
    border: 1px solid var(--border-color);
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
  }

  .tag-suggestion:hover {
    background: var(--accent-hover);
    color: var(--accent-color);
    border-color: var(--accent-color);
    transform: translateY(-1px);
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  @keyframes dropdownSlideIn {
    from {
      opacity: 0;
      transform: translateY(-8px) scale(0.98);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .search-result {
    animation: fadeInUp 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    opacity: 0;
  }

  .search-result:nth-child(1) { animation-delay: 0.05s; }
  .search-result:nth-child(2) { animation-delay: 0.08s; }
  .search-result:nth-child(3) { animation-delay: 0.11s; }
  .search-result:nth-child(4) { animation-delay: 0.14s; }
  .search-result:nth-child(5) { animation-delay: 0.17s; }

  @media (prefers-reduced-motion: reduce) {
    .search-result,
    .search-results,
    .search-loading,
    .search-empty,
    .loading-spinner {
      animation: none !important;
      transition: none !important;
    }
    
    .search-result:hover,
    .search-result:focus,
    .search-result.focused {
      transform: none !important;
    }
  }

  @media (max-width: 768px) {
    .search-container {
      margin-bottom: 1.5rem;
    }

    .search-input {
      padding: 1rem 1rem 1rem 3rem;
      padding-right: 8rem;
      font-size: 16px; /* Prevents zoom on iOS */
    }

    .search-results,
    .search-loading,
    .search-empty {
      max-height: 60vh;
    }

    .search-results-header {
      padding: 0.75rem 1rem 0.5rem;
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .search-tips {
      display: none; /* Hide tips on mobile */
    }

    .search-result {
      padding: 0.625rem 0.875rem;
      touch-action: manipulation;
      -webkit-tap-highlight-color: transparent;
    }
    
    .search-result-title {
      font-size: 0.8rem;
      line-height: 1.4;
    }

    .empty-state {
      padding: 1rem;
    }

    .tag-suggestions {
      gap: 0.375rem;
    }

    .tag-suggestion {
      font-size: 0.75rem;
      padding: 0.25rem 0.5rem;
    }
  }

  @media (max-width: 480px) {
    .search-input {
      padding: 0.875rem 0.875rem 0.875rem 2.75rem;
      padding-right: 7rem;
    }

    .search-icon {
      left: 0.875rem;
    }

    .search-clear {
      right: 4.5rem;
    }

    .search-shortcut {
      right: 0.875rem;
    }

    .search-shortcut kbd {
      font-size: 0.7rem;
      padding: 0.2rem 0.4rem;
    }

    .search-result {
      padding: 0.5rem 0.75rem;
    }
    
    .search-result-title {
      font-size: 0.75rem;
    }

    .search-results-content {
      max-height: 300px;
    }

    .empty-icon {
      font-size: 2.5rem;
    }

    .empty-state h3 {
      font-size: 1.125rem;
    }

    .empty-state p {
      font-size: 0.875rem;
    }
  }
</style>

<script>
  class SearchManager {
    constructor() {
      this.searchData = [];
      this.currentFocusIndex = -1;
      this.searchResults = [];
      this.searchTimeout = null;
      this.popularTags = [];
      
      this.elements = {
        searchInput: null,
        searchClear: null,
        searchResults: null,
        searchLoading: null,
        searchEmpty: null,
        resultsCount: null,
        searchResultsContent: null,
        tagSuggestions: null
      };
      
      this.init();
    }

    async init() {
      await this.loadSearchData();
      this.setupElements();
      this.setupEventListeners();
      this.setupKeyboardShortcuts();
      this.populateTagSuggestions();
    }

    async loadSearchData() {
      try {
        const response = await fetch('/api/search.json');
        this.searchData = await response.json();
        
        // Extract popular tags
        const tagCounts = {};
        this.searchData.forEach(post => {
          post.tags.forEach(tag => {
            tagCounts[tag] = (tagCounts[tag] || 0) + 1;
          });
        });
        
        this.popularTags = Object.entries(tagCounts)
          .sort(([,a], [,b]) => b - a)
          .slice(0, 6)
          .map(([tag]) => tag);
          
      } catch (error) {
        console.error('Failed to load search data:', error);
      }
    }

    setupElements() {
      this.elements.searchInput = document.getElementById('searchInput');
      this.elements.searchClear = document.getElementById('searchClear');
      this.elements.searchResults = document.getElementById('searchResults');
      this.elements.searchLoading = document.getElementById('searchLoading');
      this.elements.searchEmpty = document.getElementById('searchEmpty');
      this.elements.resultsCount = document.getElementById('resultsCount');
      this.elements.searchResultsContent = document.getElementById('searchResultsContent');
      this.elements.tagSuggestions = document.getElementById('tagSuggestions');
    }

    setupEventListeners() {
      // Input events
      this.elements.searchInput.addEventListener('input', (e) => this.handleInput(e));
      this.elements.searchInput.addEventListener('keydown', (e) => this.handleKeydown(e));
      this.elements.searchInput.addEventListener('focus', () => this.handleFocus());
      
      // Clear button
      this.elements.searchClear.addEventListener('click', () => this.clearSearch());
      
      // Click outside to close
      document.addEventListener('click', (e) => this.handleOutsideClick(e));
    }

    setupKeyboardShortcuts() {
      document.addEventListener('keydown', (e) => {
        // Cmd/Ctrl + B to focus search
        if ((e.metaKey || e.ctrlKey) && e.key === 'b') {
          e.preventDefault();
          this.elements.searchInput.focus();
        }
      });
    }

    populateTagSuggestions() {
      if (!this.elements.tagSuggestions) return;
      
      const tagsHTML = this.popularTags.map(tag => 
        `<button class="tag-suggestion" onclick="searchManager.searchByTag('${tag}')">#${tag}</button>`
      ).join('');
      
      this.elements.tagSuggestions.innerHTML = tagsHTML;
    }

    handleInput(e) {
      const query = e.target.value;
      
      // Show/hide clear button
      this.elements.searchClear.style.display = query ? 'block' : 'none';
      
      clearTimeout(this.searchTimeout);
      this.hideAllStates();
      
      if (!query.trim()) {
        this.hideAllStates();
        return;
      }

      // Show loading for queries longer than 2 characters
      if (query.length > 2) {
        this.showLoading();
      }

      // Debounce search
      this.searchTimeout = setTimeout(() => {
        this.performSearch(query);
      }, query.length > 2 ? 300 : 200);
    }

    handleKeydown(e) {
      const resultElements = document.querySelectorAll('.search-result');
      
      switch(e.key) {
        case 'ArrowDown':
          e.preventDefault();
          if (resultElements.length > 0) {
            this.updateFocus(Math.min(this.currentFocusIndex + 1, resultElements.length - 1));
          }
          break;
          
        case 'ArrowUp':
          e.preventDefault();
          if (resultElements.length > 0) {
            this.updateFocus(Math.max(this.currentFocusIndex - 1, -1));
          }
          break;
          
        case 'Enter':
          e.preventDefault();
          if (this.currentFocusIndex >= 0) {
            this.selectResult(this.currentFocusIndex);
          } else if (this.searchResults.length > 0) {
            this.selectResult(0);
          }
          break;
          
        case 'Escape':
          e.preventDefault();
          if (this.elements.searchInput.value) {
            this.clearSearch();
          } else {
            this.elements.searchInput.blur();
          }
          break;
      }
    }

    handleFocus() {
      const query = this.elements.searchInput.value.trim();
      if (query && this.searchResults.length > 0) {
        this.showResults();
      }
    }

    handleOutsideClick(e) {
      if (!e.target.closest('.search-container')) {
        this.hideAllStates();
      }
    }

    clearSearch() {
      this.elements.searchInput.value = '';
      this.elements.searchClear.style.display = 'none';
      this.hideAllStates();
      this.elements.searchInput.focus();
    }

    searchByTag(tag) {
      this.elements.searchInput.value = `#${tag}`;
      this.elements.searchClear.style.display = 'block';
      this.performSearch(`#${tag}`);
      this.elements.searchInput.focus();
    }

    performSearch(query) {
      if (!query.trim()) {
        this.hideAllStates();
        return;
      }

      const results = this.search(query);
      
      if (results.length === 0) {
        this.showEmpty();
      } else {
        this.displayResults(results, query);
      }
    }

    search(query) {
      const lowercaseQuery = query.toLowerCase().trim();
      
      // Check if it's a tag search
      const isTagSearch = lowercaseQuery.startsWith('#') || lowercaseQuery.startsWith('tag:');
      let searchTerm = lowercaseQuery;
      
      if (lowercaseQuery.startsWith('#')) {
        searchTerm = lowercaseQuery.slice(1);
      } else if (lowercaseQuery.startsWith('tag:')) {
        searchTerm = lowercaseQuery.slice(4);
      }
      
      const results = this.searchData.filter(post => {
        if (isTagSearch) {
          return post.tags.some(tag => tag.toLowerCase().includes(searchTerm));
        } else {
          const titleMatch = post.title.toLowerCase().includes(lowercaseQuery);
          const contentMatch = post.content.toLowerCase().includes(lowercaseQuery);
          const tagMatch = post.tags.some(tag => tag.toLowerCase().includes(lowercaseQuery));
          const descriptionMatch = post.description?.toLowerCase().includes(lowercaseQuery);
          
          return titleMatch || contentMatch || tagMatch || descriptionMatch;
        }
      });

      // Sort by relevance
      return results.sort((a, b) => {
        if (isTagSearch) {
          const aExactMatch = a.tags.some(tag => tag.toLowerCase() === searchTerm);
          const bExactMatch = b.tags.some(tag => tag.toLowerCase() === searchTerm);
          if (aExactMatch && !bExactMatch) return -1;
          if (!aExactMatch && bExactMatch) return 1;
        } else {
          const aExactTitle = a.title.toLowerCase() === lowercaseQuery;
          const bExactTitle = b.title.toLowerCase() === lowercaseQuery;
          if (aExactTitle && !bExactTitle) return -1;
          if (!aExactTitle && bExactTitle) return 1;
          
          const aTitleMatch = a.title.toLowerCase().includes(lowercaseQuery);
          const bTitleMatch = b.title.toLowerCase().includes(lowercaseQuery);
          if (aTitleMatch && !bTitleMatch) return -1;
          if (!aTitleMatch && bTitleMatch) return 1;
        }
        
        // Sort by date (newest first)
        return new Date(b.pubDate).getTime() - new Date(a.pubDate).getTime();
      });
    }

    displayResults(results, query) {
      this.searchResults = results;
      this.currentFocusIndex = -1;
      
      // Update results count
      this.elements.resultsCount.textContent = `${results.length} result${results.length !== 1 ? 's' : ''}`;
      
      // Generate results HTML
      const resultsHTML = results.map((post, index) => this.createResultHTML(post, index, query)).join('');
      
      this.elements.searchResultsContent.innerHTML = resultsHTML;
      this.showResults();
      
      // Add click handlers
      document.querySelectorAll('.search-result').forEach((el, index) => {
        el.addEventListener('click', () => this.selectResult(index));
      });
    }

    createResultHTML(post, index, query) {
      const highlightedTitle = this.highlightText(post.title, query);
      
      return `
        <div class="search-result" 
             role="option" 
             id="result-${index}"
             tabindex="-1" 
             style="animation-delay: ${Math.min(index * 0.05, 0.25)}s">
          <h3 class="search-result-title">${highlightedTitle}</h3>
        </div>
      `;
    }

    highlightText(text, query) {
      if (!query.trim()) return text;
      
      const cleanQuery = query.replace(/^#/, '').replace(/^tag:/, '');
      const regex = new RegExp(`(${cleanQuery.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
      return text.replace(regex, '<mark class="search-highlight">$1</mark>');
    }

    updateFocus(index) {
      const resultElements = document.querySelectorAll('.search-result');
      
      // Remove previous focus
      resultElements.forEach((el, i) => {
        el.classList.remove('focused');
        el.setAttribute('aria-selected', 'false');
      });
      
      if (index >= 0 && index < resultElements.length) {
        this.currentFocusIndex = index;
        const focusedElement = resultElements[index];
        focusedElement.classList.add('focused');
        focusedElement.setAttribute('aria-selected', 'true');
        focusedElement.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
        
        this.elements.searchInput.setAttribute('aria-activedescendant', `result-${index}`);
      } else {
        this.currentFocusIndex = -1;
        this.elements.searchInput.removeAttribute('aria-activedescendant');
      }
    }

    selectResult(index) {
      if (index >= 0 && index < this.searchResults.length) {
        window.location.href = `/blog/${this.searchResults[index].slug}`;
      }
    }

    showResults() {
      this.hideAllStates();
      this.elements.searchResults.classList.remove('hidden');
      this.elements.searchInput.setAttribute('aria-expanded', 'true');
    }

    showLoading() {
      this.hideAllStates();
      this.elements.searchLoading.classList.remove('hidden');
    }

    showEmpty() {
      this.hideAllStates();
      this.elements.searchEmpty.classList.remove('hidden');
    }

    hideAllStates() {
      this.elements.searchResults.classList.add('hidden');
      this.elements.searchLoading.classList.add('hidden');
      this.elements.searchEmpty.classList.add('hidden');
      this.elements.searchInput.setAttribute('aria-expanded', 'false');
      this.currentFocusIndex = -1;
    }
  }

  // Initialize search manager when DOM is loaded
  let searchManager;
  document.addEventListener('DOMContentLoaded', () => {
    searchManager = new SearchManager();
  });
</script>